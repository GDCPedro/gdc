{"version":3,"sources":["store/index.ts","utils/request.ts","api/index.ts","components/Hello.tsx","views/Index.tsx","views/About.tsx","layout/GDCFooter.tsx","layout/SideMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["sideBarState","atom","key","default","service","axios","create","baseURL","withCredentials","timeout","interceptors","request","use","config","message","loading","response","destroy","data","errcode","error","Promise","reject","name","get","params","post","Hello","level","Error","className","type","onClick","handleGetHello","getLevel","Array","join","handleRegister","pswd","then","res","success","Index","useRecoilState","sideBar","setSideBar","console","log","Inner","About","this","Component","GDCFooter","props","SideMenu","useRecoilValue","state","items","title","icon","AppleOutlined","to","WechatOutlined","YoutubeOutlined","map","item","Item","Layout","Header","Sider","Content","Footer","App","locale","zhCN","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f7394399.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const sideBarState = atom({\n  key: \"sideBarState\", // unique ID (with respect to other atoms/selectors)\n  default: false\n})","import axios from \"axios\";\nimport { message } from 'antd';\n\nconst service = axios.create({\n  baseURL: \"/api\",\n  withCredentials: false,\n  timeout: 30 * 1000\n})\n\nservice.interceptors.request.use(\n  config => {\n    message.loading(\"加载中...\", 0, () => { });\n    // config.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    return config;\n  }\n)\n\nservice.interceptors.response.use(\n  response => {\n    message.destroy();\n    if (response.data.errcode !== 0) {\n      // Toast.fail(resp.data.message);\n      message.error(response.data.message);\n    }\n    return response.data;\n  },\n  error => {\n    message.error(\"网络错误！\");\n    // console.log(\"response error: \", error); // for debug\n    return Promise.reject(error);\n  }\n)\n\nexport default service;","import request from \"../utils/request\"\n\nclass Service {\n  getHello(name: string): Promise<any> {\n    return request.get(`/hello?name=${name}`);\n  }\n\n  handleRegister(params: {\n    name: string;\n    pswd: string;\n  }): Promise<any> {\n    return request.post(\"/register\", params)\n  }\n}\n\nexport default new Service();","import React from \"react\";\nimport service from \"../api/index\";\nimport { Button, message } from \"antd\";\n\ninterface Props {\n  name: string;\n  level?: number;\n}\ninterface State {}\n\nexport default function Hello({ name, level = 1 }: Props): JSX.Element {\n  if (level <= 0) {\n    throw new Error(\"You could be a little more enthusiastic. :D\");\n  }\n\n  return (\n    <div className=\"hello\">\n      <Button type=\"primary\" className=\"greeting\" onClick={handleGetHello}>\n        Hello, {name + getLevel(level)}\n      </Button>\n    </div>\n  );\n}\n\nconst getLevel: Function = (level: number) => Array(level + 1).join(\"!\");\n\nconst handleGetHello = (): void => {\n  // service.getHello(\"郭东超\").then((res) => {\n  //   if (res.errcode === 0) {\n  //     message.success(res.message);\n  //   }\n  // });\n  // ###\n  // 试试注册\n  service\n    .handleRegister({ name: \"guodongchao\", pswd: \"199411\" })\n    .then((res) => {\n      if (res.errcode === 0) {\n        message.success(res.message);\n      }\n    });\n};\n","import React, { ReactElement } from \"react\";\nimport Hello from \"../components/Hello\";\nimport { Button } from \"antd\";\nimport \"../App.scss\";\nimport { useRecoilState } from \"recoil\";\nimport { sideBarState } from \"../store/index\";\n\ninterface Props {}\n\nexport default function Index({}: Props): ReactElement {\n  const [sideBar, setSideBar] = useRecoilState(sideBarState);\n  console.log(sideBar);\n\n  return (\n    <div className=\"index\">\n      <Hello name=\"gdc\" level={5}></Hello>\n      <Button\n        onClick={() => {\n          setSideBar(!sideBar);\n        }}\n      >\n        开关\n      </Button>\n    </div>\n  );\n}\n","import React, { Component, ReactElement } from \"react\";\n\ninterface Props {}\n\nfunction Inner({}: Props): ReactElement {\n  return (\n    <div className=\"about\">\n      <div>About</div>\n    </div>\n  );\n}\n\nexport default class About extends Component {\n  componentDidMount() {\n    console.log(this);\n  }\n\n  render() {\n    return <Inner />;\n  }\n}\n","import React, { ReactElement } from \"react\";\ninterface Props {\n  name?: string;\n}\n\nexport default function GDCFooter(props: Props): ReactElement {\n  console.log(1);\n  return <div className=\"gdc-footer\">&copy;1994-2020&nbsp;郭东超</div>;\n}\n","import React, { ReactElement } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport {\n  AppleOutlined,\n  WechatOutlined,\n  YoutubeOutlined,\n} from \"@ant-design/icons\";\nimport { sideBarState } from \"../store/index\";\nimport { useRecoilValue } from \"recoil\";\ninterface IMenuItem {\n  key: string;\n  title: string;\n  icon: object;\n  to: string;\n}\n\ninterface Props {}\ninterface State {\n  items: Array<IMenuItem>;\n}\n\nexport default function SideMenu({}: Props): ReactElement {\n  // 菜单展开/收起的状态\n  const sideBar: boolean = useRecoilValue(sideBarState);\n  console.log(\"--\", sideBar);\n  // 菜单列表\n  const state: State = {\n    items: [\n      {\n        key: \"1\",\n        title: \"Index\",\n        icon: <AppleOutlined />,\n        to: \"/index\",\n      },\n      {\n        key: \"2\",\n        title: \"About\",\n        icon: <WechatOutlined />,\n        to: \"/about\",\n      },\n      {\n        key: \"3\",\n        title: \"App\",\n        icon: <YoutubeOutlined />,\n        to: \"/\",\n      },\n    ],\n  };\n\n  return (\n    <Menu>\n      {state.items.map((item) => (\n        <Menu.Item key={item.key} title={item.title} icon={item.icon}>\n          <NavLink to={item.to}>{item.title}</NavLink>\n        </Menu.Item>\n      ))}\n      <Menu.Item key=\"999\" title=\"路由参数\">\n        <NavLink to=\"/about/1314\">路由参数</NavLink>\n      </Menu.Item>\n    </Menu>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./store/index\";\nimport Index from \"./views/Index\";\nimport About from \"./views/About\";\n\nimport { RecoilRoot } from \"recoil\";\n\nimport \"./App.scss\";\nimport \"antd/dist/antd.css\";\n\nimport GDCFooter from \"./layout/GDCFooter\";\nimport SideMenu from \"./layout/SideMenu\";\n\n// antd的中文\nimport zhCN from \"antd/es/locale/zh_CN\";\nimport { ConfigProvider, Layout } from \"antd\";\n\nconst { Header, Sider, Content, Footer } = { ...Layout };\n\nfunction App() {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <Switch>\n        <RecoilRoot>\n          <Layout className=\"layout\">\n            <Header className=\"header\">header</Header>\n            <Layout className=\"sub-layout\">\n              <Sider className=\"left-sidebar\">\n                <SideMenu />\n              </Sider>\n              <Content>\n                <Route path=\"/index\">\n                  <Index />\n                </Route>\n                <Route path=\"/about/:id\">\n                  <About />\n                </Route>\n              </Content>\n            </Layout>\n            <Footer className=\"footer\">\n              <GDCFooter />\n            </Footer>\n          </Layout>\n        </RecoilRoot>\n      </Switch>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}