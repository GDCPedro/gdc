{"version":3,"sources":["utils/request.ts","api/index.ts","components/Hello.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["service","axios","create","baseURL","withCredentials","timeout","interceptors","request","use","config","headers","response","data","errcode","message","error","Promise","reject","get","Hello","name","level","Error","className","type","onClick","handleGetHello","getLevel","Array","join","getHello","then","res","success","App","locale","zhCN","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"wNAGMA,EAAUC,IAAMC,OAAO,CAC3BC,QAAS,OACTC,iBAAiB,EACjBC,QAAS,MAGXL,EAAQM,aAAaC,QAAQC,KAC3B,SAAAC,GAEE,OADAA,EAAOC,QAAQ,gBAAkB,oCAC1BD,KAIXT,EAAQM,aAAaK,SAASH,KAC5B,SAAAG,GAKE,OAJ8B,IAA1BA,EAASC,KAAKC,SAEhBC,IAAQC,MAAMJ,EAASC,KAAKE,SAEvBH,EAASC,QAElB,SAAAG,GAGE,OAFAD,IAAQC,MAAM,kCAEPC,QAAQC,OAAOF,MAIXf,QCvBA,M,mGAJX,OAAOO,EAAQW,IAAI,c,eCMR,SAASC,EAAT,GAAyD,IAAxCC,EAAuC,EAAvCA,KAAuC,IAAjCC,aAAiC,MAAzB,EAAyB,EACrE,GAAIA,GAAS,EACX,MAAM,IAAIC,MAAM,+CAGlB,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CAAQC,KAAK,UAAUD,UAAU,WAAWE,QAASC,GAArD,UACUN,EAAOO,EAASN,KAMhC,IAAMM,EAAqB,SAACN,GAAD,OAAmBO,MAAMP,EAAQ,GAAGQ,KAAK,MAE9DH,EAAiB,WACrB1B,EAAQ8B,WAAWC,MAAK,SAACC,GACH,IAAhBA,EAAInB,SACNC,IAAQmB,QAAQD,EAAIlB,a,gBCPXoB,MAZf,WACE,OACE,kBAAC,IAAD,CAAgBC,OAAQC,KACtB,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACJ,EAAD,CAAOC,KAAK,cAAcC,MAAO,QCHvBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMD,a","file":"static/js/main.b2169742.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { message } from 'antd';\n\nconst service = axios.create({\n  baseURL: \"/api\",\n  withCredentials: false,\n  timeout: 30 * 1000\n})\n\nservice.interceptors.request.use(\n  config => {\n    config.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n    return config;\n  }\n)\n\nservice.interceptors.response.use(\n  response => {\n    if (response.data.errcode !== 0) {\n      // Toast.fail(resp.data.message);\n      message.error(response.data.message);\n    }\n    return response.data;\n  },\n  error => {\n    message.error(\"网络错误！\");\n    // console.log(\"response error: \", error); // for debug\n    return Promise.reject(error);\n  }\n)\n\nexport default service;","import request from \"../utils/request\"\n\nclass Service {\n  getHello(): Promise<any> {\n    return request.get(\"/hello\");\n  }\n}\n\nexport default new Service();","import React from \"react\";\nimport service from \"../api/index\";\nimport { Button, message } from \"antd\";\n\ninterface Props {\n  name: string;\n  level?: number;\n}\ninterface State {}\n\nexport default function Hello({ name, level = 1 }: Props): JSX.Element {\n  if (level <= 0) {\n    throw new Error(\"You could be a little more enthusiastic. :D\");\n  }\n\n  return (\n    <div className=\"hello\">\n      <Button type=\"primary\" className=\"greeting\" onClick={handleGetHello}>\n        Hello, {name + getLevel(level)}\n      </Button>\n    </div>\n  );\n}\n\nconst getLevel: Function = (level: number) => Array(level + 1).join(\"!\");\n\nconst handleGetHello = (): void => {\n  service.getHello().then((res) => {\n    if (res.errcode === 0) {\n      message.success(res.message);\n    }\n  });\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport 'antd/dist/antd.css';\n\nimport Hello from \"./components/Hello\";\n\n// antd的中文\nimport zhCN from \"antd/es/locale/zh_CN\";\nimport { ConfigProvider } from \"antd\";\n\nfunction App() {\n  return (\n    <ConfigProvider locale={zhCN}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Hello name=\"guodongchao\" level={3} />\n        </header>\n      </div>\n    </ConfigProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}